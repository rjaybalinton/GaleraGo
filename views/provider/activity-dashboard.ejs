<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gradient-to-br from-emerald-50 to-teal-50 min-h-screen">
    <div class="max-w-7xl mx-auto p-6 space-y-6">
        <!-- Header -->
        <div class="flex items-center justify-between">
            <div>
                <h1 class="text-3xl font-bold text-gray-900">Activity Provider Dashboard</h1>
                <p class="text-gray-600">Manage Island Hopping & Snorkeling Activities</p>
            </div>
            <div class="flex space-x-4">
                <button id="addPackageBtn" class="bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 rounded-lg flex items-center">
                    <i data-lucide="plus" class="w-4 h-4 mr-2"></i>
                    Add Package
                </button>
                <a href="/logout" class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg">Logout</a>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Total Packages</p>
                        <p class="text-2xl font-bold text-gray-900"><%= stats.totalPackages %></p>
                    </div>
                    <i data-lucide="ship" class="w-8 h-8 text-gray-400"></i>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Total Bookings</p>
                        <p class="text-2xl font-bold text-gray-900"><%= stats.totalBookings %></p>
                    </div>
                    <i data-lucide="calendar" class="w-8 h-8 text-gray-400"></i>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Pending Bookings</p>
                        <p class="text-2xl font-bold text-orange-600"><%= bookings.filter(b => b.status === 'pending').length %></p>
                    </div>
                    <i data-lucide="clock" class="w-8 h-8 text-orange-400"></i>
                </div>
            </div>

            <div class="bg-white rounded-lg shadow p-6">
                <div class="flex items-center justify-between">
                    <div>
                        <p class="text-sm font-medium text-gray-600">Active Bookings</p>
                        <p class="text-2xl font-bold text-blue-600"><%= stats.activeBookings %></p>
                    </div>
                    <i data-lucide="users" class="w-8 h-8 text-blue-400"></i>
                </div>
            </div>
        </div>

        <!-- New Arrivals Action Required -->
        <% const pendingBookings = bookings.filter(b => b.status === 'pending'); %>
        <% if (pendingBookings.length > 0) { %>
        <div class="bg-orange-50 border border-orange-200 rounded-lg p-4 mb-6">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <i data-lucide="alert-circle" class="w-6 h-6 text-orange-600 mr-3"></i>
                    <div>
                        <h3 class="text-lg font-semibold text-orange-800">New Arrivals Need Action</h3>
                        <p class="text-orange-700">You have <strong><%= pendingBookings.length %></strong> new booking<%= pendingBookings.length > 1 ? 's' : '' %> that require your attention</p>
                    </div>
                </div>
                <div class="flex space-x-2">
                    <button onclick="document.querySelector('[data-tab=&quot;bookings&quot;]').click(); document.querySelector('[data-subtab=&quot;pending&quot;]').click();" 
                            class="bg-orange-600 hover:bg-orange-700 text-white px-4 py-2 rounded-lg text-sm font-medium">
                        Review Bookings
                    </button>
                </div>
            </div>
            <div class="mt-3 text-sm text-orange-700">
                <p><strong>Actions Required:</strong></p>
                <ul class="list-disc list-inside mt-1 space-y-1">
                    <li><strong>Confirm for Admin:</strong> Approve bookings to send them to admin for final confirmation</li>
                    <li><strong>Cancel:</strong> Reject bookings that cannot be accommodated</li>
                </ul>
            </div>
        </div>
        <% } %>

        <!-- Cancelled Bookings with Refunds Required -->
        <% const cancelledBookings = bookings.filter(b => b.status === 'cancelled'); %>
        <% const refundsRequired = cancelledBookings.filter(b => b.payment_method === 'gcash' && !b.refund_processed); %>
        <% if (refundsRequired.length > 0) { %>
        <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <i data-lucide="credit-card" class="w-6 h-6 text-red-600 mr-3"></i>
                    <div>
                        <h3 class="text-lg font-semibold text-red-800">GCash Refunds Required</h3>
                        <p class="text-red-700">You have <strong><%= refundsRequired.length %></strong> cancelled booking<%= refundsRequired.length > 1 ? 's' : '' %> that need refund processing</p>
                    </div>
                </div>
                <div class="flex space-x-2">
                    <button onclick="document.querySelector('[data-tab=&quot;bookings&quot;]').click(); document.querySelector('[data-subtab=&quot;cancelled&quot;]').click();" 
                            class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg text-sm font-medium">
                        Process Refunds
                    </button>
                </div>
            </div>
            <div class="mt-3 text-sm text-red-700">
                <p><strong>Total Refund Amount:</strong> ₱<%= refundsRequired.reduce((sum, b) => sum + parseFloat(b.total_amount || 0), 0).toLocaleString() %></p>
                <p class="mt-1"><strong>Action Required:</strong> Contact customers and process GCash refunds for cancelled bookings</p>
            </div>
        </div>
        <% } %>

        <!-- Tabs -->
        <div id="providerMessage" class="hidden mx-6 mb-4">
            <div id="providerMessageBox" class="px-4 py-3 rounded border"></div>
        </div>
        <div class="bg-white rounded-lg shadow">
            <div class="border-b border-gray-200">
                <nav class="-mb-px flex space-x-8 px-6">
                    <button class="tab-btn active py-4 px-1 border-b-2 border-emerald-500 font-medium text-sm text-emerald-600" data-tab="packages">
                        My Packages
                    </button>
                    <button class="tab-btn py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700" data-tab="bookings">
                        Bookings
                    </button>
                    <button class="tab-btn py-4 px-1 border-b-2 border-transparent font-medium text-sm text-gray-500 hover:text-gray-700" data-tab="analytics">
                        Analytics
                    </button>
                </nav>
            </div>

            <!-- Packages Tab -->
            <div id="more-packages-tab" class="tab-content p-6">
                <div id="packagesGrid" class="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
                    <% packages.forEach(package => { %>
                        <div class="border border-gray-200 rounded-lg overflow-hidden hover:shadow-md transition-shadow">
                            <!-- Package Image -->
                            <% if (package.image) { %>
                                <img src="/uploads/packages/<%= package.image %>" alt="<%= package.name %>" class="w-full h-48 object-cover">
                            <% } else { %>
                                <div class="w-full h-48 bg-gray-200 flex items-center justify-center">
                                    <i data-lucide="image" class="w-12 h-12 text-gray-400"></i>
                                </div>
                            <% } %>
                            
                            <div class="p-6">
                                <div class="flex items-center justify-between mb-3">
                                    <span class="px-2 py-1 text-xs rounded-full 
                                        <% if (package.activity_type === 'Island Hopping') { %>bg-blue-100 text-blue-800<% } else { %>bg-teal-100 text-teal-800<% } %>">
                                        <% if (package.activity_type === 'Island Hopping') { %>🚢<% } else { %>🌊<% } %>
                                        <%= package.activity_type %>
                                    </span>
                                    <div class="flex space-x-1">
                                        <button onclick="editPackage(<%= package.id %>)" class="text-gray-400 hover:text-gray-600">
                                            <i data-lucide="edit" class="w-4 h-4"></i>
                                        </button>
                                        <button onclick="deletePackage(<%= package.id %>)" class="text-red-400 hover:text-red-600">
                                            <i data-lucide="trash-2" class="w-4 h-4"></i>
                                        </button>
                                    </div>
                                </div>
                                
                                <h3 class="font-semibold text-lg mb-2"><%= package.name %></h3>
                                <p class="text-gray-600 text-sm mb-4"><%= package.description %></p>
                                
                                <div class="space-y-2">
                                    <div class="flex items-center justify-between">
                                        <span class="text-2xl font-bold text-emerald-600">₱<%= package.price.toLocaleString() %></span>
                                        <div class="flex items-center text-sm text-gray-600">
                                            <i data-lucide="clock" class="w-4 h-4 mr-1"></i>
                                            <%= package.duration %> day<%= package.duration > 1 ? 's' : '' %>
                                        </div>
                                    </div>
                                    
                                    <div class="flex items-center text-sm text-gray-600">
                                        <i data-lucide="users" class="w-4 h-4 mr-1"></i>
                                        Max <%= package.max_participants %> people
                                    </div>
                                    
                                    <div class="text-sm text-gray-600">
                                        <strong>Includes:</strong> <%= package.includes %>
                                    </div>
                                    
                                    <% if (package.gcash_number && package.gcash_name) { %>
                                    <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
                                        <div class="flex items-center text-sm text-blue-700 mb-1">
                                            <i data-lucide="smartphone" class="w-4 h-4 mr-2"></i>
                                            <strong>GCash Payment Available</strong>
                                        </div>
                                        <div class="text-xs text-blue-600">
                                            <div><strong>Number:</strong> <%= package.gcash_number %></div>
                                            <div><strong>Account:</strong> <%= package.gcash_name %></div>
                                        </div>
                                    </div>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                </div>
            </div>
           

            <!-- Bookings Tab -->
            <div id="bookings-tab" class="tab-content p-6 hidden">
                <!-- Search Bar -->
                <div class="mb-6">
                    <div class="flex items-center space-x-4">
                        <div class="flex-1">
                            <label class="block text-sm font-medium text-gray-700 mb-1">Search Bookings</label>
                            <input 
                                type="text" 
                                id="bookingSearch" 
                                placeholder="Search by booking reference (e.g., PG89025119), name, email, or phone..." 
                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500"
                            >
                        </div>
                        <div class="pt-6">
                            <button 
                                id="clearSearch" 
                                class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 text-sm"
                            >
                                Clear
                            </button>
                        </div>
                    </div>
                    <div id="searchResults" class="mt-4 hidden">
                        <h4 class="text-sm font-medium text-gray-700 mb-2">Search Results:</h4>
                        <div id="searchResultsList" class="space-y-4"></div>
                    </div>
                </div>

                <!-- Sub Tabs for Status -->
                <div class="border-b border-gray-200 mb-4">
                    <nav class="-mb-px flex space-x-6">
                        <button class="sub-tab-btn py-2 px-1 border-b-2 border-emerald-500 text-emerald-600 text-sm font-medium flex items-center" data-subtab="pending">
                            Pending
                            <span id="pendingTabCount" class="ml-2 bg-orange-100 text-orange-800 text-xs font-medium px-2 py-1 rounded-full"><%= bookings.filter(b => b.status === 'pending').length %></span>
                        </button>
                        <button class="sub-tab-btn py-2 px-1 border-b-2 border-transparent text-sm text-gray-500 hover:text-gray-700 flex items-center" data-subtab="completed">
                            Completed
                            <span id="completedTabCount" class="ml-2 bg-green-100 text-green-800 text-xs font-medium px-2 py-1 rounded-full"><%= bookings.filter(b => b.status === 'completed').length %></span>
                        </button>
                        <button class="sub-tab-btn py-2 px-1 border-b-2 border-transparent text-sm text-gray-500 hover:text-gray-700 flex items-center" data-subtab="cancelled">
                            Cancelled
                            <span id="cancelledTabCount" class="ml-2 bg-red-100 text-red-800 text-xs font-medium px-2 py-1 rounded-full"><%= bookings.filter(b => b.status === 'cancelled').length %></span>
                        </button>
                        <button class="sub-tab-btn py-2 px-1 border-b-2 border-transparent text-sm text-gray-500 hover:text-gray-700 flex items-center" data-subtab="all">
                            All
                            <span id="allTabCount" class="ml-2 bg-gray-100 text-gray-800 text-xs font-medium px-2 py-1 rounded-full"><%= bookings.length %></span>
                        </button>
                    </nav>
                </div>

                <!-- Status Sections -->
                <div id="statusSections" class="">
                    <div id="subtab-pending">
                        <h4 class="text-sm font-medium text-yellow-700 mb-2">Pending (<span id="pendingCount">0</span>)</h4>
                        <div id="pendingBookings" class="space-y-4"></div>
                    </div>
                    <div id="subtab-completed" class="hidden">
                        <h4 class="text-sm font-medium text-blue-700 mb-2">Completed (<span id="completedCount">0</span>)</h4>
                        <div id="completedBookings" class="space-y-4"></div>
                    </div>
                    <div id="subtab-cancelled" class="hidden">
                        <div class="flex items-center justify-between mb-2">
                            <h4 class="text-sm font-medium text-red-700">Cancelled (<span id="cancelledCount">0</span>)</h4>
                            <div id="refundNotification" class="hidden">
                                <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-orange-100 text-orange-800">
                                    <i data-lucide="alert-triangle" class="w-3 h-3 mr-1"></i>
                                    <span id="refundCount">0</span> GCash Refunds Pending
                                </span>
                            </div>
                        </div>
                        <div id="cancelledBookings" class="space-y-4"></div>
                    </div>
                </div>

                <!-- All Bookings -->
                <div id="subtab-all" class="hidden mt-4">
                    <h4 class="text-sm font-medium text-gray-700 mb-4">All Bookings:</h4>
                    <div class="space-y-4">
                        <% bookings.forEach(booking => { %>
                            <% const isCancelled = booking.status === 'cancelled'; %>
                            <div class="flex items-center justify-between p-4 border border-gray-200 rounded-lg <%= isCancelled ? 'bg-red-50 border-red-200' : '' %>">
                                <div class="space-y-1">
                                    <div class="flex items-center space-x-2">
                                        <h3 class="font-medium <%= isCancelled ? 'text-red-700' : '' %>"><%= booking.package_name %></h3>
                                        <span class="px-2 py-1 text-xs rounded-full 
                                            <% if (booking.status === 'confirmed') { %>bg-blue-100 text-blue-800<% } 
                                               else if (booking.status === 'pending') { %>bg-yellow-100 text-yellow-800<% } 
                                               else if (booking.status === 'completed') { %>bg-green-100 text-green-800<% } 
                                               else if (booking.status === 'cancelled') { %>bg-red-100 text-red-800<% } 
                                               else { %>bg-gray-100 text-gray-800<% } %>">
                                            <% if (booking.status === 'cancelled') { %>❌ Cancelled by User<% } else { %><%= booking.status %><% } %>
                                        </span>
                                        <% if (booking.booking_reference) { %>
                                            <span class="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">#<%= booking.booking_reference %></span>
                                        <% } %>
                                    </div>
                                    <p class="text-sm text-gray-600">
                                        <%= booking.first_name %> <%= booking.last_name %> • <%= booking.number_of_participants %> participants
                                    </p>
                                    <p class="text-sm text-gray-600">
                                        <%= new Date(booking.booking_date).toLocaleDateString() %> • <%= booking.contact_number %>
                                    </p>
                                    <div class="flex items-center space-x-4 text-sm">
                                        <span class="<%= booking.payment_method === 'gcash' ? 'text-blue-600' : 'text-green-600' %>">
                                            <%= booking.payment_method === 'gcash' ? '📱' : '💰' %> <%= (booking.payment_method || 'cash').toUpperCase() %> Payment
                                            <% if (booking.payment_reference) { %>
                                                <span class="text-xs bg-gray-100 px-1 py-0.5 rounded ml-1"><%= booking.payment_reference %></span>
                                            <% } %>
                                        </span>
                                    </div>
                                    <% if (booking.special_requests) { %>
                                        <p class="text-sm text-blue-600">Special: <%= booking.special_requests %></p>
                                    <% } %>
                                    <% if (isCancelled) { %>
                                        <div class="mt-2 p-3 bg-red-100 border border-red-200 rounded-lg">
                                            <div class="flex items-center space-x-2 mb-2">
                                                <span class="text-red-600 font-medium">⚠️ CANCELLED BY USER</span>
                                            </div>
                                            <% if (booking.cancellation_reason) { %>
                                                <p class="text-sm text-red-700"><strong>Reason:</strong> <%= booking.cancellation_reason %></p>
                                            <% } %>
                                            <% if (booking.cancellation_notes) { %>
                                                <p class="text-sm text-red-700"><strong>Notes:</strong> <%= booking.cancellation_notes %></p>
                                            <% } %>
                                            <% if (booking.payment_method === 'gcash') { %>
                                                <% if (booking.refund_processed) { %>
                                                    <div class="mt-2 p-2 bg-green-100 border border-green-200 rounded">
                                                        <p class="text-sm text-green-800 font-medium">✅ GCASH REFUND PROCESSED</p>
                                                        <p class="text-xs text-green-700">Amount: ₱<%= booking.total_amount.toLocaleString() %></p>
                                                        <p class="text-xs text-green-700">Refund completed on: <%= booking.refund_processed_at ? new Date(booking.refund_processed_at).toLocaleDateString() : 'N/A' %></p>
                                                    </div>
                                                <% } else { %>
                                                    <div class="mt-2 p-2 bg-orange-100 border border-orange-200 rounded">
                                                        <p class="text-sm text-orange-800 font-medium">💰 GCASH REFUND REQUIRED</p>
                                                        <p class="text-xs text-orange-700">Amount: ₱<%= booking.total_amount.toLocaleString() %></p>
                                                        <p class="text-xs text-orange-700">Contact customer for refund processing</p>
                                                    </div>
                                                <% } %>
                                            <% } else { %>
                                                <div class="mt-2 p-2 bg-gray-100 border border-gray-200 rounded">
                                                    <p class="text-sm text-gray-700">💵 Cash Payment - No refund needed</p>
                                                </div>
                                            <% } %>
                                            <% if (booking.updated_at) { %>
                                                <p class="text-xs text-red-600 mt-1">Cancelled on: <%= new Date(booking.updated_at).toLocaleDateString() %></p>
                                            <% } %>
                                        </div>
                                    <% } %>
                                </div>

                                <div class="text-right space-y-2">
                                    <p class="font-bold text-lg <%= isCancelled ? 'text-red-600' : '' %>">₱<%= booking.total_amount.toLocaleString() %></p>
                                    <% if (isCancelled) { %>
                                        <p class="text-xs text-red-600 font-medium">REFUND REQUIRED</p>
                                    <% } %>
                                    <div class="flex space-x-2">
                                        <% if (booking.status === 'pending') { %>
                                            <button onclick="updateBookingStatus(<%= booking.id %>, 'confirmed')" 
                                                    class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm">
                                                Confirm for Admin
                                            </button>
                                            <button onclick="updateBookingStatus(<%= booking.id %>, 'cancelled')" 
                                                    class="border border-gray-300 hover:bg-gray-50 px-3 py-1 rounded text-sm">
                                                Cancel
                                            </button>
                                        <% } else if (booking.status === 'confirmed') { %>
                                            <button onclick="updateBookingStatus(<%= booking.id %>, 'completed')" 
                                                    class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm">
                                                Complete
                                            </button>
                                        <% } else if (booking.status === 'cancelled') { %>
                                            <% if (booking.payment_method === 'gcash') { %>
                                                <% if (booking.refund_processed) { %>
                                                    <span class="text-xs text-green-600 px-2 py-1 bg-green-100 rounded">
                                                        ✅ Refund Processed
                                                    </span>
                                                <% } else { %>
                                                    <button onclick="markRefundProcessed(<%= booking.id %>)" 
                                                            class="bg-orange-600 hover:bg-orange-700 text-white px-3 py-1 rounded text-sm">
                                                        Mark Refund Processed
                                            </button>
                                                <% } %>
                                            <% } else { %>
                                                <span class="text-xs text-gray-500 px-2 py-1 bg-gray-100 rounded">
                                                    No Action Required
                                                </span>
                                            <% } %>
                                        <% } %>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>
            </div>

            <!-- Analytics Tab -->
            <div id="analytics-tab" class="tab-content p-6 hidden">
                <!-- Monthly Income Chart -->
                <div class="mb-6">
                    <div class="border border-gray-200 rounded-lg p-6">
                        <div class="flex items-center justify-between mb-4">
                            <h3 class="font-semibold text-lg">Monthly Income Trend</h3>
                            <button id="refreshAnalytics" class="bg-emerald-600 hover:bg-emerald-700 text-white px-3 py-1 rounded text-sm flex items-center">
                                <i data-lucide="refresh-cw" class="w-4 h-4 mr-1"></i>
                                Refresh
                            </button>
                        </div>
                        <div class="h-80">
                            <canvas id="monthlyIncomeChart"></canvas>
                        </div>
                    </div>
                </div>

                <div class="grid gap-6 md:grid-cols-2">
                    <div class="border border-gray-200 rounded-lg p-6">
                        <h3 class="font-semibold mb-4">Package Performance</h3>
                        <div class="space-y-4">
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-2">
                                    <span>🚢 Island Hopping</span>
                                </div>
                                <span class="font-bold">
                                    <%= bookings.filter(b => {
                                        const pkg = packages.find(p => p.id === b.package_id);
                                        return pkg && pkg.activity_type === 'Island Hopping';
                                    }).length %> bookings
                                </span>
                            </div>
                            <div class="flex items-center justify-between">
                                <div class="flex items-center space-x-2">
                                    <span>🌊 Snorkeling</span>
                                </div>
                                <span class="font-bold">
                                    <%= bookings.filter(b => {
                                        const pkg = packages.find(p => p.id === b.package_id);
                                        return pkg && pkg.activity_type === 'Snorkeling';
                                    }).length %> bookings
                                </span>
                            </div>
                        </div>
                    </div>

                    <div class="border border-gray-200 rounded-lg p-6">
                        <h3 class="font-semibold mb-4">Revenue Breakdown</h3>
                        <div class="space-y-4">
                            <div class="flex items-center justify-between">
                                <span>Total Revenue</span>
                                <span class="font-bold text-lg" id="totalRevenue">₱<%= bookings.reduce((sum, b) => sum + parseFloat(b.total_amount || 0), 0).toLocaleString() %></span>
                            </div>
                            <div class="flex items-center justify-between">
                                <span>Total Bookings</span>
                                <span class="font-bold text-lg" id="totalBookings"><%= stats.totalBookings %></span>
                            </div>
                            <div class="flex items-center justify-between">
                                <span>Pending Bookings</span>
                                <span class="font-bold text-orange-600"><%= stats.pendingBookings %></span>
                            </div>
                            <div class="flex items-center justify-between">
                                <span>Average per Booking</span>
                                <span class="font-bold">
                                    ₱<%= stats.totalBookings > 0 ? Math.round(bookings.reduce((sum, b) => sum + parseFloat(b.total_amount || 0), 0) / stats.totalBookings).toLocaleString() : 0 %>
                                </span>
                            </div>
                            <div class="flex items-center justify-between">
                                <span>Island Hopping Revenue</span>
                                <span class="font-bold text-blue-600">
                                    ₱<%= bookings.filter(b => {
                                        const pkg = packages.find(p => p.id === b.package_id);
                                        return pkg && pkg.activity_type === 'Island Hopping';
                                    }).reduce((sum, b) => sum + parseFloat(b.total_amount || 0), 0).toLocaleString() %>
                                </span>
                            </div>
                            <div class="flex items-center justify-between">
                                <span>Snorkeling Revenue</span>
                                <span class="font-bold text-teal-600">
                                    ₱<%= bookings.filter(b => {
                                        const pkg = packages.find(p => p.id === b.package_id);
                                        return pkg && pkg.activity_type === 'Snorkeling';
                                    }).reduce((sum, b) => sum + parseFloat(b.total_amount || 0), 0).toLocaleString() %>
                                </span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Add/Edit Package Modal -->
        <div id="packageModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
            <div class="bg-white rounded-lg p-6 max-w-2xl w-full mx-4 max-h-[90vh] overflow-y-auto">
                <div class="flex items-center justify-between mb-4">
                    <h3 id="modalTitle" class="text-lg font-semibold">Add New Package</h3>
                    <button id="closePackageModal" class="text-gray-400 hover:text-gray-600">
                        <i data-lucide="x" class="w-6 h-6"></i>
                    </button>
                </div>
                
                <form id="packageForm" class="space-y-4" enctype="multipart/form-data">
                    <input type="hidden" id="packageId" name="packageId">
                    
                    <!-- Image Upload -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Package Image</label>
                        <div class="flex items-center space-x-4">
                            <div class="flex-1">
                                <input type="file" name="image" id="packageImage" accept="image/*" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500">
                            </div>
                            <div id="imagePreview" class="hidden">
                                <img id="previewImg" src="/placeholder.svg" alt="Preview" class="w-20 h-20 object-cover rounded-lg border">
                            </div>
                        </div>
                        <p class="text-xs text-gray-500 mt-1">Upload an image for your package (max 5MB)</p>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Package Name</label>
                            <input type="text" name="name" id="packageName" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Activity Type</label>
                            <select name="activity_type" id="activityType" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500">
                                <option value="Island Hopping">Island Hopping</option>
                                <option value="Snorkeling">Snorkeling</option>
                            </select>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
                        <textarea name="description" id="packageDescription" required rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500"></textarea>
                    </div>

                    <div class="grid grid-cols-3 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Price (PHP)</label>
                            <input type="number" name="price" id="packagePrice" required min="0" step="0.01" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Duration (days)</label>
                            <input type="number" name="duration" id="packageDuration" required min="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500">
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-1">Max Participants</label>
                            <input type="number" name="max_participants" id="maxParticipants" required min="1" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500">
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-1">What's Included</label>
                        <textarea name="includes" id="packageIncludes" required rows="2" placeholder="e.g., Boat ride, lunch, snorkeling gear" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-emerald-500"></textarea>
                    </div>

                    <!-- GCash Payment Information -->
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <h4 class="text-sm font-semibold text-blue-800 mb-3 flex items-center">
                            <i data-lucide="smartphone" class="w-4 h-4 mr-2"></i>
                            GCash Payment Information
                        </h4>
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">GCash Number</label>
                                <input type="text" name="gcash_number" id="gcashNumber" placeholder="09XX XXX XXXX" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                <p class="text-xs text-gray-500 mt-1">Your GCash mobile number for payments</p>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-1">GCash Account Name</label>
                                <input type="text" name="gcash_name" id="gcashName" placeholder="Your full name" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500">
                                <p class="text-xs text-gray-500 mt-1">Name registered with GCash</p>
                            </div>
                        </div>
                        <div class="mt-3 p-3 bg-blue-100 rounded-lg">
                            <p class="text-xs text-blue-700">
                                <i data-lucide="info" class="w-3 h-3 inline mr-1"></i>
                                <strong>Note:</strong> Customers can pay online using GCash. Make sure your GCash account is active and can receive payments.
                            </p>
                        </div>
                    </div>

                    <div class="flex justify-end space-x-3 pt-4 border-t">
                        <button type="button" id="cancelPackage" class="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50">
                            Cancel
                        </button>
                        <button type="submit" id="submitPackage" class="px-4 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg">
                            Create Package
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
        const itemsPerPage = 6;
    </script>
    <script>
        function showProviderMessage(type, text) {
            const wrap = document.getElementById('providerMessage');
            const box = document.getElementById('providerMessageBox');
            const base = 'px-4 py-3 rounded border';
            let cls = '';
            if (type === 'success') cls = 'bg-emerald-50 border-emerald-300 text-emerald-800';
            else if (type === 'error') cls = 'bg-red-50 border-red-300 text-red-800';
            else cls = 'bg-blue-50 border-blue-300 text-blue-800';
            box.className = base + ' ' + cls;
            box.innerText = text;
            wrap.classList.remove('hidden');
            clearTimeout(window.__providerMsgTimer);
            window.__providerMsgTimer = setTimeout(() => {
                wrap.classList.add('hidden');
            }, 3000);
        }

        // Store packages data for JavaScript access
        const packagesData = <%- JSON.stringify(packages) %>;
        const bookingsData = <%- JSON.stringify(bookings) %>;
        let currentPage = 1;
        const totalPages = Math.ceil(packagesData.length / itemsPerPage);

        // Initialize Lucide icons
        lucide.createIcons();

        // Tab functionality
        const tabBtns = document.querySelectorAll('.tab-btn');
        const tabContents = document.querySelectorAll('.tab-content');

        tabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const tabName = btn.dataset.tab;
                
                // Update button states
                tabBtns.forEach(b => {
                    b.classList.remove('active', 'border-emerald-500', 'text-emerald-600');
                    b.classList.add('border-transparent', 'text-gray-500');
                });
                btn.classList.add('active', 'border-emerald-500', 'text-emerald-600');
                btn.classList.remove('border-transparent', 'text-gray-500');
                
                // Update content visibility
                tabContents.forEach(content => {
                    content.classList.add('hidden');
                });
                document.getElementById(`${tabName}-tab`).classList.remove('hidden');
            });
        });

        // Package modal functionality
        const packageModal = document.getElementById('packageModal');
        const packageForm = document.getElementById('packageForm');
        const modalTitle = document.getElementById('modalTitle');
        const submitBtn = document.getElementById('submitPackage');
        let isEditMode = false;

        // Image preview functionality
        document.getElementById('packageImage').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    document.getElementById('previewImg').src = e.target.result;
                    document.getElementById('imagePreview').classList.remove('hidden');
                };
                reader.readAsDataURL(file);
            } else {
                document.getElementById('imagePreview').classList.add('hidden');
            }
        });

        document.getElementById('addPackageBtn').addEventListener('click', () => {
            isEditMode = false;
            modalTitle.textContent = 'Add New Package';
            submitBtn.textContent = 'Create Package';
            packageForm.reset();
            document.getElementById('packageId').value = '';
            document.getElementById('imagePreview').classList.add('hidden');
            openModal();
        });

        document.getElementById('closePackageModal').addEventListener('click', closeModal);
        document.getElementById('cancelPackage').addEventListener('click', closeModal);

        function openModal() {
            packageModal.classList.remove('hidden');
            packageModal.classList.add('flex');
        }

        function closeModal() {
            packageModal.classList.add('hidden');
            packageModal.classList.remove('flex');
            packageForm.reset();
            document.getElementById('imagePreview').classList.add('hidden');
        }

        // Package form submission
        packageForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(packageForm);
            const packageId = document.getElementById('packageId').value;
            
            try {
                let url = '/provider/activities/packages';
                let method = 'POST';
                
                if (isEditMode && packageId) {
                    url = `/provider/activities/packages/${packageId}`;
                    method = 'PUT';
                }

                const response = await fetch(url, {
                    method: method,
                    body: formData
                });

                const result = await response.json();
                
                if (result.success) {
                    showProviderMessage('success', isEditMode ? 'Package updated successfully!' : 'Package created successfully!');
                    setTimeout(() => location.reload(), 800);
                } else {
                    showProviderMessage('error', result.message || 'Operation failed');
                }
            } catch (error) {
                console.error('Error:', error);
                showProviderMessage('error', 'Failed to save package');
            }
        });

        // Update booking status
        async function updateBookingStatus(bookingId, status) {
            try {
                const response = await fetch(`/provider/activities/bookings/${bookingId}/status`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ status })
                });

                const result = await response.json();
                if (result.success) {
                    showProviderMessage('success', 'Booking status updated successfully');
                    setTimeout(() => location.reload(), 800);
                } else {
                    showProviderMessage('error', result.message || 'Failed to update booking status');
                }
            } catch (error) {
                showProviderMessage('error', 'Failed to update booking status');
            }
        }

        // Edit package function
        async function editPackage(packageId) {
            try {
                const response = await fetch(`/provider/activities/packages/${packageId}`);
                const result = await response.json();
                
                if (!result.success) {
                    showProviderMessage('error', result.message || 'Failed to load package data');
                    return;
                }

                const packageData = result.package;
                
                isEditMode = true;
                modalTitle.textContent = 'Edit Package';
                submitBtn.textContent = 'Update Package';

                // Fill form with package data
                document.getElementById('packageId').value = packageData.id;
                document.getElementById('packageName').value = packageData.name;
                document.getElementById('activityType').value = packageData.activity_type;
                document.getElementById('packageDescription').value = packageData.description || '';
                document.getElementById('packagePrice').value = packageData.price;
                document.getElementById('packageDuration').value = packageData.duration || 1;
                document.getElementById('maxParticipants').value = packageData.max_participants || 10;
                document.getElementById('packageIncludes').value = packageData.includes || '';
                document.getElementById('gcashNumber').value = packageData.gcash_number || '';
                document.getElementById('gcashName').value = packageData.gcash_name || '';

                // Show existing image if available
                if (packageData.image) {
                    document.getElementById('previewImg').src = `/uploads/packages/${packageData.image}`;
                    document.getElementById('imagePreview').classList.remove('hidden');
                }

                openModal();
            } catch (error) {
                console.error('Error loading package:', error);
                showProviderMessage('error', 'Failed to load package data');
            }
        }

        // Delete package function
        async function deletePackage(packageId) {
            if (!confirm('Are you sure you want to delete this package? This action cannot be undone.')) {
                return;
            }

            try {
                const response = await fetch(`/provider/activities/packages/${packageId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    showProviderMessage('success', 'Package deleted successfully');
                    setTimeout(() => location.reload(), 800);
                } else {
                    showProviderMessage('error', result.message || 'Failed to delete package');
                }
            } catch (error) {
                console.error('Error deleting package:', error);
                showProviderMessage('error', 'Failed to delete package. Please try again.');
            }
        }

        // Booking Search Functionality
        let searchTimeout;
        const bookingSearchInput = document.getElementById('bookingSearch');
        const searchResults = document.getElementById('searchResults');
        const searchResultsList = document.getElementById('searchResultsList');
        const allBookings = document.getElementById('subtab-all');
        const clearSearchBtn = document.getElementById('clearSearch');

        // Render status sections
        function renderStatusSections() {
            const pending = bookingsData.filter(b => (b.status || '').toLowerCase() === 'pending');
            const completed = bookingsData.filter(b => (b.status || '').toLowerCase() === 'completed');
            const cancelled = bookingsData.filter(b => (b.status || '').toLowerCase() === 'cancelled');

            // Calculate GCash refunds pending
            const gcashRefundsPending = cancelled.filter(b => 
                (b.payment_method || '').toLowerCase() === 'gcash' && 
                !b.refund_processed
            );

            // Update section counts
            document.getElementById('pendingCount').innerText = pending.length;
            document.getElementById('completedCount').innerText = completed.length;
            document.getElementById('cancelledCount').innerText = cancelled.length;

            // Update tab counts
            document.getElementById('pendingTabCount').innerText = pending.length;
            document.getElementById('completedTabCount').innerText = completed.length;
            document.getElementById('cancelledTabCount').innerText = cancelled.length;
            document.getElementById('allTabCount').innerText = bookingsData.length;

            // Update refund notification
            const refundNotification = document.getElementById('refundNotification');
            const refundCount = document.getElementById('refundCount');
            
            if (gcashRefundsPending.length > 0) {
                refundCount.innerText = gcashRefundsPending.length;
                refundNotification.classList.remove('hidden');
            } else {
                refundNotification.classList.add('hidden');
            }

            document.getElementById('pendingBookings').innerHTML = pending.length
                ? pending.map(createBookingHTML).join('')
                : '<p class="text-gray-500">No pending bookings.</p>';
            document.getElementById('completedBookings').innerHTML = completed.length
                ? completed.map(createBookingHTML).join('')
                : '<p class="text-gray-500">No completed bookings.</p>';
            document.getElementById('cancelledBookings').innerHTML = cancelled.length
                ? cancelled.map(createBookingHTML).join('')
                : '<p class="text-gray-500">No cancelled bookings.</p>';
        }
        renderStatusSections();

        // Sub-tab switching
        const subTabBtns = document.querySelectorAll('.sub-tab-btn');
        const subTabs = {
            pending: document.getElementById('subtab-pending'),
            completed: document.getElementById('subtab-completed'),
            cancelled: document.getElementById('subtab-cancelled'),
            all: document.getElementById('subtab-all')
        };

        subTabBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const target = btn.dataset.subtab;
                // update button styles
                subTabBtns.forEach(b => {
                    b.classList.remove('border-emerald-500', 'text-emerald-600');
                    b.classList.add('border-transparent', 'text-gray-500');
                });
                btn.classList.add('border-emerald-500', 'text-emerald-600');
                btn.classList.remove('border-transparent', 'text-gray-500');

                // show target, hide others
                Object.keys(subTabs).forEach(key => {
                    if (key === target) subTabs[key].classList.remove('hidden');
                    else subTabs[key].classList.add('hidden');
                });
            });
        });

        bookingSearchInput.addEventListener('input', function(e) {
            const query = e.target.value.trim();
            
            // Clear previous timeout
            clearTimeout(searchTimeout);
            
            if (query.length < 2) {
                showAllBookings();
                return;
            }
            
            // Debounce search
            searchTimeout = setTimeout(() => {
                searchBookings(query);
            }, 300);
        });

        clearSearchBtn.addEventListener('click', function() {
            bookingSearchInput.value = '';
            showAllBookings();
        });

        async function searchBookings(query) {
            try {
                const response = await fetch(`/provider/activities/bookings/search?q=${encodeURIComponent(query)}`);
                const result = await response.json();
                
                if (result.success) {
                    displaySearchResults(result.bookings);
                } else {
                    showProviderMessage('error', result.message || 'Search failed');
                }
            } catch (error) {
                console.error('Search error:', error);
                showProviderMessage('error', 'Failed to search bookings');
            }
        }

        function displaySearchResults(bookings) {
            if (bookings.length === 0) {
                searchResultsList.innerHTML = '<p class="text-gray-500 text-center py-4">No bookings found matching your search.</p>';
            } else {
                searchResultsList.innerHTML = bookings.map(booking => createBookingHTML(booking)).join('');
            }
            
            searchResults.classList.remove('hidden');
            allBookings.classList.add('hidden');
        }

        function showAllBookings() {
            searchResults.classList.add('hidden');
            allBookings.classList.remove('hidden');
        }

        function createBookingHTML(booking) {
            const statusClass = getStatusClass(booking.status);
            const statusButtons = getStatusButtons(booking);
            
            // Payment method display
            const paymentMethod = booking.payment_method || 'cash';
            const paymentIcon = paymentMethod === 'gcash' ? '📱' : '💰';
            const paymentColor = paymentMethod === 'gcash' ? 'text-blue-600' : 'text-green-600';
            
            // Cancellation information
            const isCancelled = booking.status === 'cancelled';
            const cancellationInfo = isCancelled ? getCancellationInfo(booking) : '';
            
            return `
                <div class="flex items-center justify-between p-4 border border-gray-200 rounded-lg ${isCancelled ? 'bg-red-50 border-red-200' : ''}">
                    <div class="space-y-1">
                        <div class="flex items-center space-x-2">
                            <h3 class="font-medium ${isCancelled ? 'text-red-700' : ''}">${booking.package_name}</h3>
                            <span class="px-2 py-1 text-xs rounded-full ${statusClass}">
                                ${booking.status === 'confirmed' ? 'Awaiting Admin Approval' : 
                                  booking.status === 'pending' ? 'Pending' : 
                                  booking.status === 'completed' ? 'Completed' : 
                                  booking.status === 'cancelled' ? '❌ Cancelled by User' : booking.status}
                            </span>
                            ${booking.booking_reference ? `<span class="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded">#${booking.booking_reference}</span>` : ''}
                        </div>
                        <p class="text-sm text-gray-600">
                            ${booking.first_name} ${booking.last_name} • ${booking.number_of_participants || 'N/A'} participants
                        </p>
                        <p class="text-sm text-gray-600">
                            ${new Date(booking.booking_date).toLocaleDateString()} • ${booking.contact_number || booking.phone || 'N/A'}
                        </p>
                        <div class="flex items-center space-x-4 text-sm">
                            <span class="${paymentColor}">
                                ${paymentIcon} ${paymentMethod.toUpperCase()} Payment
                                ${booking.payment_reference ? `<span class="text-xs bg-gray-100 px-1 py-0.5 rounded ml-1">${booking.payment_reference}</span>` : ''}
                            </span>
                        </div>
                        ${booking.special_requests ? `<p class="text-sm text-blue-600">Special: ${booking.special_requests}</p>` : ''}
                        ${cancellationInfo}
                    </div>

                    <div class="text-right space-y-2">
                        <p class="font-bold text-lg ${isCancelled ? 'text-red-600' : ''}">₱${parseFloat(booking.total_amount || 0).toLocaleString()}</p>
                        ${isCancelled ? '<p class="text-xs text-red-600 font-medium">REFUND REQUIRED</p>' : ''}
                        <div class="flex space-x-2">
                            ${statusButtons}
                        </div>
                    </div>
                </div>
            `;
        }

        function getCancellationInfo(booking) {
            const paymentMethod = booking.payment_method || 'cash';
            const isGCash = paymentMethod === 'gcash';
            
            let cancellationHTML = `
                <div class="mt-2 p-3 bg-red-100 border border-red-200 rounded-lg">
                    <div class="flex items-center space-x-2 mb-2">
                        <span class="text-red-600 font-medium">⚠️ CANCELLED BY USER</span>
                    </div>
            `;
            
            if (booking.cancellation_reason) {
                cancellationHTML += `<p class="text-sm text-red-700"><strong>Reason:</strong> ${booking.cancellation_reason}</p>`;
            }
            
            if (booking.cancellation_notes) {
                cancellationHTML += `<p class="text-sm text-red-700"><strong>Notes:</strong> ${booking.cancellation_notes}</p>`;
            }
            
            if (isGCash) {
                if (booking.refund_processed) {
                    cancellationHTML += `
                        <div class="mt-2 p-2 bg-green-100 border border-green-200 rounded">
                            <p class="text-sm text-green-800 font-medium">✅ GCASH REFUND PROCESSED</p>
                            <p class="text-xs text-green-700">Amount: ₱${parseFloat(booking.total_amount || 0).toLocaleString()}</p>
                            <p class="text-xs text-green-700">Refund completed on: ${booking.refund_processed_at ? new Date(booking.refund_processed_at).toLocaleDateString() : 'N/A'}</p>
                        </div>
                    `;
                } else {
                    cancellationHTML += `
                        <div class="mt-2 p-2 bg-orange-100 border border-orange-200 rounded">
                            <p class="text-sm text-orange-800 font-medium">💰 GCASH REFUND REQUIRED</p>
                            <p class="text-xs text-orange-700">Amount: ₱${parseFloat(booking.total_amount || 0).toLocaleString()}</p>
                            <p class="text-xs text-orange-700">Contact customer for refund processing</p>
                        </div>
                    `;
                }
            } else {
                cancellationHTML += `
                    <div class="mt-2 p-2 bg-gray-100 border border-gray-200 rounded">
                        <p class="text-sm text-gray-700">💵 Cash Payment - No refund needed</p>
                    </div>
                `;
            }
            
            if (booking.updated_at) {
                const cancelledDate = new Date(booking.updated_at).toLocaleDateString();
                cancellationHTML += `<p class="text-xs text-red-600 mt-1">Cancelled on: ${cancelledDate}</p>`;
            }
            
            cancellationHTML += `</div>`;
            
            return cancellationHTML;
        }

        function getStatusClass(status) {
            switch(status) {
                case 'confirmed': return 'bg-blue-100 text-blue-800';
                case 'pending': return 'bg-yellow-100 text-yellow-800';
                case 'completed': return 'bg-green-100 text-green-800';
                case 'cancelled': return 'bg-red-100 text-red-800';
                default: return 'bg-gray-100 text-gray-800';
            }
        }

        function getStatusButtons(booking) {
            let buttons = '';
            
            // Status update buttons
            if (booking.status === 'pending') {
                buttons += `
                    <button onclick="updateBookingStatus(${booking.id}, 'confirmed')" 
                            class="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm">
                        Confirm for Admin
                    </button>
                    <button onclick="updateBookingStatus(${booking.id}, 'cancelled')" 
                            class="border border-gray-300 hover:bg-gray-50 px-3 py-1 rounded text-sm">
                        Cancel
                    </button>
                `;
            } else if (booking.status === 'confirmed') {
                buttons += `
                    <button onclick="updateBookingStatus(${booking.id}, 'completed')" 
                            class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded text-sm">
                        Complete
                    </button>
                `;
            } else if (booking.status === 'cancelled') {
                const paymentMethod = booking.payment_method || 'cash';
                if (paymentMethod === 'gcash') {
                    if (booking.refund_processed) {
                        buttons += `
                            <span class="text-xs text-green-600 px-2 py-1 bg-green-100 rounded">
                                ✅ Refund Processed
                            </span>
                        `;
                    } else {
                        buttons += `
                            <button onclick="markRefundProcessed(${booking.id})" 
                                    class="bg-orange-600 hover:bg-orange-700 text-white px-3 py-1 rounded text-sm">
                                Mark Refund Processed
                    </button>
                `;
            }
                } else {
                    buttons += `
                        <span class="text-xs text-gray-500 px-2 py-1 bg-gray-100 rounded">
                            No Action Required
                        </span>
                    `;
                }
            }
            
            return buttons;
        }

        // Mark refund as processed
        async function markRefundProcessed(bookingId) {
            if (confirm('Mark this refund as processed? This will help track refund completion.')) {
                try {
                    const response = await fetch(`/provider/activities/bookings/${bookingId}/refund-processed`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        }
                    });

                    const result = await response.json();
                    if (result.success) {
                        showProviderMessage('success', 'Refund marked as processed');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showProviderMessage('error', result.message || 'Failed to mark refund as processed');
                    }
                } catch (error) {
                    console.error('Error marking refund as processed:', error);
                    showProviderMessage('error', 'Failed to mark refund as processed');
                }
            }
        }

        // Monthly Income Chart
        let monthlyIncomeChart = null;

        // Initialize the monthly income chart
        async function initializeMonthlyIncomeChart() {
            try {
                const response = await fetch('/provider/activities/analytics/monthly-income');
                const data = await response.json();
                
                if (data.success) {
                    renderMonthlyIncomeChart(data.monthlyIncome, data.monthlyBookings);
                } else {
                    console.error('Failed to fetch monthly income data:', data.message);
                }
            } catch (error) {
                console.error('Error fetching monthly income data:', error);
            }
        }

        // Render the monthly income chart
        function renderMonthlyIncomeChart(incomeData, bookingData) {
            const ctx = document.getElementById('monthlyIncomeChart').getContext('2d');
            
            // Destroy existing chart if it exists
            if (monthlyIncomeChart) {
                monthlyIncomeChart.destroy();
            }

            // Prepare data for the last 12 months
            const months = [];
            const incomeValues = [];
            const bookingValues = [];
            
            // Generate last 12 months
            for (let i = 11; i >= 0; i--) {
                const date = new Date();
                date.setMonth(date.getMonth() - i);
                const monthKey = date.toISOString().slice(0, 7); // YYYY-MM format
                const monthName = date.toLocaleDateString('en-US', { month: 'short', year: '2-digit' });
                
                months.push(monthName);
                
                // Find data for this month
                const incomeMonth = incomeData.find(d => d.month === monthKey);
                const bookingMonth = bookingData.find(d => d.month === monthKey);
                
                incomeValues.push(incomeMonth ? parseFloat(incomeMonth.total_income) : 0);
                bookingValues.push(bookingMonth ? parseInt(bookingMonth.booking_count) : 0);
            }

            monthlyIncomeChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: months,
                    datasets: [
                        {
                            label: 'Monthly Income (₱)',
                            data: incomeValues,
                            borderColor: 'rgb(16, 185, 129)',
                            backgroundColor: 'rgba(16, 185, 129, 0.1)',
                            borderWidth: 3,
                            fill: true,
                            tension: 0.4,
                            yAxisID: 'y'
                        },
                        {
                            label: 'Total Bookings',
                            data: bookingValues,
                            borderColor: 'rgb(59, 130, 246)',
                            backgroundColor: 'rgba(59, 130, 246, 0.1)',
                            borderWidth: 2,
                            fill: false,
                            tension: 0.4,
                            yAxisID: 'y1'
                        }
                    ]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    interaction: {
                        mode: 'index',
                        intersect: false,
                    },
                    scales: {
                        x: {
                            display: true,
                            title: {
                                display: true,
                                text: 'Month'
                            }
                        },
                        y: {
                            type: 'linear',
                            display: true,
                            position: 'left',
                            title: {
                                display: true,
                                text: 'Income (₱)'
                            },
                            ticks: {
                                callback: function(value) {
                                    return '₱' + value.toLocaleString();
                                }
                            }
                        },
                        y1: {
                            type: 'linear',
                            display: true,
                            position: 'right',
                            title: {
                                display: true,
                                text: 'Bookings'
                            },
                            grid: {
                                drawOnChartArea: false,
                            },
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'top',
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    if (context.datasetIndex === 0) {
                                        return 'Income: ₱' + context.parsed.y.toLocaleString();
                                    } else {
                                        return 'Bookings: ' + context.parsed.y;
                                    }
                                }
                            }
                        }
                    }
                }
            });
        }

        // Refresh analytics data
        document.getElementById('refreshAnalytics').addEventListener('click', async () => {
            const refreshBtn = document.getElementById('refreshAnalytics');
            const originalText = refreshBtn.innerHTML;
            
            // Show loading state
            refreshBtn.innerHTML = '<i data-lucide="loader-2" class="w-4 h-4 mr-1 animate-spin"></i>Refreshing...';
            refreshBtn.disabled = true;
            
            try {
                // Refresh the chart
                await initializeMonthlyIncomeChart();
                
                // Refresh the stats by reloading the page
                setTimeout(() => {
                    location.reload();
                }, 1000);
                
            } catch (error) {
                console.error('Error refreshing analytics:', error);
                showProviderMessage('error', 'Failed to refresh analytics data');
            } finally {
                // Reset button state
                refreshBtn.innerHTML = originalText;
                refreshBtn.disabled = false;
                lucide.createIcons(); // Re-initialize icons
            }
        });

        // Initialize chart when analytics tab is clicked
        document.querySelector('[data-tab="analytics"]').addEventListener('click', () => {
            setTimeout(() => {
                if (!monthlyIncomeChart) {
                    initializeMonthlyIncomeChart();
                }
            }, 100);
        });

    </script>
</body>
</html>
